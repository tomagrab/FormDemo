@rendermode InteractiveServer

<EditForm Enhance Model="Person" method="POST" FormName="PersonForm" OnValidSubmit="HandleValidSubmit" class="form">
    <h3 class="font-bold">SSR Form</h3>
    <DataAnnotationsValidator />
    <div class="form-control-row">
        <div class="form-control-col">
            <label for="FirstName">First Name</label>
            <InputText id="FirstName" @bind-Value="Person.FirstName" class="input" />
            <ValidationMessage For="@(() => Person.FirstName)" class="error-text"/>
        </div>
        <div class="form-control-col">
            <label for="LastName">Last Name</label>
            <InputText id="LastName" @bind-Value="Person.LastName" class="input" />
            <ValidationMessage For="@(() => Person.LastName)" class="error-text"/>
        </div>
    </div>
    <div class="form-control-col">
        <label for="LifeStory">Life Story</label>
        <InputTextArea id="LifeStory" @bind-Value="Person.LifeStory" class="textarea" @oninput="UpdateCharacterCount" />
        <ValidationMessage For="@(() => Person.LifeStory)" class="error-text"/>
        <div class="align-right">
            <p class="@GetCharacterCountClass()">@GetCharacterCountText()</p>
        </div>
    </div>
    <div class="form-control-row">
        <label for="IsEnrolled">Enrolled</label>
        <InputCheckbox id="IsEnrolled" @bind-Value="Person.IsEnrolled" class="checkbox"/>
    </div>
    <div class="flex flex-col">
        <button class="btn btn-base btn-primary" type="submit">
            Add Person
        </button>
    </div>
</EditForm>

@code
{
    [Parameter]
    public EventCallback<PersonModel> OnPersonAdd { get; set; }
    [SupplyParameterFromForm]
    private PersonModel Person { get; set; } = new();
    private List<PersonModel> People { get; set; } = new();
    private int MaxLengthLifeStory = 500;
    private int CharacterCount = 0;
    private void UpdateCharacterCount(ChangeEventArgs e)
    {
        var text = e.Value?.ToString() ?? string.Empty;
        CharacterCount = text.Length;
    }
    private string GetCharacterCountClass()
    {
        return CharacterCount > MaxLengthLifeStory ? "error-text" : "";
    }
    private string GetCharacterCountText()
    {
        return CharacterCount > MaxLengthLifeStory ? $"{CharacterCount} / {MaxLengthLifeStory}" : $"{CharacterCount} / {MaxLengthLifeStory}";
    }
    private async Task HandleValidSubmit()
    {
        // Add the person to the list
        await OnPersonAdd.InvokeAsync(Person);

        // Reset the form
        Person = new();
    }
}
